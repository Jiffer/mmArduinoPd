#N canvas 423 216 765 502 10;
#X msg 75 112 close;
#X msg 57 61 devices;
#X msg 74 85 open 4;
#N canvas 95 274 761 439 read_digital 0;
#X obj 167 61 inlet;
#X obj 156 319 outlet;
#X obj 229 319 outlet;
#X obj 278 320 outlet;
#X obj 181 232 list prepend;
#X obj 267 233 t l;
#N canvas 163 220 646 477 serial_println 0;
#X obj 60 25 inlet;
#X obj 156 145 t f b;
#X obj 156 209 +;
#X obj 183 170 f;
#X obj 183 192 * 10;
#X msg 198 139 0;
#X obj 156 231 t f f;
#X obj 60 248 f;
#X obj 60 122 t b b;
#X obj 60 270 outlet;
#X text 152 17 to be used with [comport] for utilising Arduino's Serial.println()
function;
#X obj 156 116 - 48;
#X text 186 211 this is taken from the code often used in the Arduino:
;
#X text 208 229 while(Serial.available));
#X text 216 244 byte inByte = Serial.read() \;;
#X text 216 257 if((inByte >= '0') && (inByte <= '9'));
#X text 208 295 (curly brackets are not available in Pd's comments)
;
#X text 235 273 int temp = temp * 10 + inByte - '0' \;;
#X text 214 345 written by Alexandros Drymonitis;
#X obj 111 73 moses 48;
#X obj 156 95 moses 58;
#X text 172 72 let only digits through;
#X obj 60 47 sel 10 13;
#X connect 0 0 22 0;
#X connect 1 0 2 0;
#X connect 1 1 3 0;
#X connect 2 0 6 0;
#X connect 3 0 4 0;
#X connect 4 0 2 1;
#X connect 5 0 3 1;
#X connect 6 0 7 1;
#X connect 6 1 3 1;
#X connect 7 0 9 0;
#X connect 8 0 7 0;
#X connect 8 1 5 0;
#X connect 11 0 1 0;
#X connect 19 1 20 0;
#X connect 20 0 11 0;
#X connect 22 0 8 0;
#X connect 22 2 19 0;
#X restore 167 160 pd serial_println;
#X obj 167 89 parse-start-stop 68 100;
#X obj 181 283 unpack f f f;
#X text 316 104 100 = 'd' : end digital packet;
#X text 315 89 68 = 'D': begin digital packet;
#X text 285 160 turn Serial.println characters into integers;
#X text 303 230 pack values into a list that starts right after the
;
#X text 303 245 begin packet character;
#X text 274 280 send each value to its own outlet add an 'f' and an
outlet for each value you are sending between begin/end chars;
#X connect 0 0 7 0;
#X connect 4 0 5 0;
#X connect 4 0 8 0;
#X connect 5 0 4 1;
#X connect 6 0 4 0;
#X connect 7 0 6 0;
#X connect 7 1 4 1;
#X connect 8 0 1 0;
#X connect 8 1 2 0;
#X connect 8 2 3 0;
#X restore 73 270 pd read_digital;
#X text 121 84 <- open the port where your Arduino is connected \,
mine is 4;
#X text 116 60 <- click to list the devices available;
#X obj 166 212 route open;
#X obj 166 233 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X floatatom 74 361 5 0 0 0 - - -;
#X floatatom 116 360 5 0 0 0 - - -;
#X floatatom 160 361 5 0 0 0 - - -;
#X obj 74 300 resample 50;
#X obj 116 319 resample 50;
#X obj 160 339 resample 50;
#X obj 73 191 comport 4 115200;
#X text 190 232 <- am I connected?;
#X text 175 268 <- parse data \, expects a 'D' then the values \, then
a 'd';
#X text 232 337 <- resample to display in a GUI \, otherwise it bogs
down;
#N canvas 842 389 450 300 reportInfo 0;
#X msg 75 95 info;
#X obj 74 75 metro 1000;
#X obj 74 35 loadbang;
#X obj 74 56 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1 1
;
#X obj 75 121 outlet;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X restore 89 166 pd reportInfo;
#X text 175 165 <- just keeps track of if its connected;
#X text 49 454 by Jiffer Harriman;
#X text 48 468 Creative Commons Open Source;
#X connect 0 0 14 0;
#X connect 1 0 14 0;
#X connect 2 0 14 0;
#X connect 3 0 11 0;
#X connect 3 1 12 0;
#X connect 3 2 13 0;
#X connect 6 0 7 0;
#X connect 11 0 8 0;
#X connect 12 0 9 0;
#X connect 13 0 10 0;
#X connect 14 0 3 0;
#X connect 14 1 6 0;
#X connect 18 0 14 0;
